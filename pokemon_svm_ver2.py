# -*- coding: utf-8 -*-
"""pokemon_svm_ver2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KOsE0xJSXs8VYYrn7LDr78mBQW7LsbKH
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from keras.models import Sequential
from keras.utils import to_categorical
from keras.layers import Dense
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.multioutput import MultiOutputClassifier
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn import svm
import joblib
from sklearn import datasets

pokemon_1 = '불꽃' #@param {type:"raw"}
pokemon_2 = '페어리' #@param {type:"raw"}
pokemon_3 = '땅, 강철' #@param {type:"raw"}
pokemon_4 = '물, 비행' #@param {type:"raw"}
pokemon_5 = '물' #@param {type:"raw"}
pokemon_6 = '노말' #@param {type:"raw"}
pokemon_7 = '강철, 고스트' #@param {type:"raw"}
pokemon_8 = '바위, 악' #@param {type:"raw"}
pokemon_9 = '노말' #@param {type:"raw"}
pokemon_10 = '노말' #@param {type:"raw"}
new_data = {'1위 라인업 추천 포켓몬' : pokemon_1, '2위 라인업 추천 포켓몬' : pokemon_2, '3위 라인업 추천 포켓몬' : pokemon_3, '4위 라인업 추천 포켓몬' : pokemon_4, '5위 라인업 추천 포켓몬' : pokemon_5, '6위 라인업 추천 포켓몬' : pokemon_6, '7위 라인업 추천 포켓몬' : pokemon_7,'8위 라인업 추천 포켓몬' : pokemon_8, '9위 라인업 추천 포켓몬' : pokemon_9, '10위 라인업 추천 포켓몬' : pokemon_10}
new_data = pd.DataFrame([new_data])

from google.colab import files

# 파일 업로드
uploaded = files.upload()

# 업로드한 파일을 불러오기
import joblib

model = joblib.load('svc_model.pkl')

# 각 열에 대해 레이블 인코더를 개별적으로 적용
label_encoders = {}
for column in new_data.columns:
    if new_data[column].dtype == 'object':  # 범주형 데이터만 변환
        le = LabelEncoder()
        new_data[column] = le.fit_transform(new_data[column])
        label_encoders[column] = le  # 각 열의 인코더 저장

predictions = model.predict(new_data)

predictions = pd.DataFrame(predictions, columns=['선택한 포켓몬'])

  # 각 열을 다시 범주형 데이터로 복구
for column in predictions.columns:
    if column in label_encoders:
        predictions[column] = label_encoders[column].inverse_transform(predictions[column])

# 각 열을 다시 범주형 데이터로 복구
for column in predictions.columns:
    if column in label_encoders:
        predictions[column] = label_encoders[column].inverse_transform(predictions[column])

recommandation = predictions['선택한 포켓몬'].values[0]
print(f'당신의 라인업에 적당한 포켓몬은 {recommandation} 입니다.')